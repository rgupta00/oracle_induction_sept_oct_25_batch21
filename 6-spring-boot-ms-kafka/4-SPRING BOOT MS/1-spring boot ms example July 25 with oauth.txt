Microservice cheetsheet step by step:
--------------------------------------
Microservices Architecture?

	=> Microservices architecture allows to avoid monolith application for 
	large system. 

	=> It provide loose coupling between collaborating processes which running
	 independently in different environments with tight cohesion.

Adv MS?	:)
	=> Smaller code base is easy to maintain.
	=> Easy to scale as individual component.
	=> Technology diversity i.e. we can mix libraries, databases, frameworks etc.
	=> Fault isolation i.e. a process failure should not bring whole system down.
	=> Better support for smaller and parallel team.
	=> Independent deployment
	=> Deployment time reduce

Microservices Challenges	:(

	=> Difficult to achieve strong consistency across services
	=> ACID transactions do not span multiple processes.
	=> Distributed System so hard to debug and trace the issues
	=> Greater need for end to end testing
	=> Required cultural changes in across teams like Dev and Ops

What is Spring Cloud?
	=> building blocks for Cloud and Microservices
	=> provides microservices infrastructure like provide use services
		 such as Service Discovery, Configuration server and Monitoring.
	=>  provides several other open source projects like Netflix OSS.
	=>  provides PaaS like Cloud Foundry, AWS and Heroku.
	=>  uses Spring Boot style starters
	
	
	Advantage of spring boot , configuration spring boot
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 	Advantage of spring boot
	_____________________

	=> Auto-Configuration 
				Automatically configures your application based on dependencies
				(e.g., spring-boot-starter-data-jpa auto-configures Hibernate + DataSource).

	=> Standalone Applications	
			No need for WAR deployment on external servers. Just run with java -jar or embedded Tomcat/Jetty.


	=> Opionated Defaults	
			Provides sensible defaults so you can focus on writing business logic, not configurations.
			
	=> Rapid Development Tool
			Reduce boilerplate with @SpringBootApplication, @RestController, @Autowired, etc.
			
	=> Adv Maven Dependency Management

	=> Externalized Configuration
		bean can be configured through application.properties file 
		without touching java or xml config

	=> Production support
		We get health checking, application and jvm metrics, 
		jmx via http and a few more things for free

	=> Runnable Jars
		 We can package your application as a runnable jar with embedded tomcat
		 included so it presents a self-contained deployment unit

	=> Microservice Friendly	
			Lightweight, fast startup, REST support, and easy integration with Spring Cloud.
			
	=> Easy Integration	
			Works seamlessly with Kafka, RabbitMQ, Redis, MongoDB, PostgreSQL, Elasticsearch, etc.
			
	=> Built-in Dev Tools	
			Auto-restart, LiveReload, and in-memory databases for faster dev-feedback loops.
			
	=> Cloud Config Support	
			Can externalize configuration using Spring Cloud Config for dynamic property management.



How Spring Boot Helps Build Cloud-Native Applications
-------------------------------------------------------------
Capability							Spring Boot Support
Stateless Architecture				Easy to create stateless REST services 
									using @RestController and RESTful conventions.
									
Externalized Config					Use application.yml, application-prod.yml, or 
									Spring Cloud Config Server to manage env-based config.
									
Health Monitoring					Actuator provides /actuator/health, /actuator/metrics for readiness
									& liveness probes in Kubernetes.
									
Scalability							Lightweight jars can be containerized and easily
									replicated across multiple pods/instances.
									
Service Discovery					Works with Spring Cloud Netflix Eureka, Consul, or 
									Kubernetes DNS for service registration/discovery.
									
Resilience							Combine with Resilience4j or Hystrix to build fault-tolerant systems 
									(circuit breakers, retries).
									
Distributed Tracing					Integrate with Spring Cloud Sleuth + Zipkin for traceability in microservices.

Messaging Support					Easy integration with Kafka or RabbitMQ for decoupled communication.

API Gateway Support					Use Spring Cloud Gateway for routing, throttling, and security at the edge.

CI/CD & DevOps Ready				Easily dockerized, supports Spring Profiles, external config, 
									and works great with GitOps pipelines.



What is a Microservice?
-----------------------------
	A Microservice is a small, independent, and loosely coupled service that performs a single, 
	well-defined business function and communicates with other services through 
	lightweight protocols like HTTP/REST, gRPC, or messaging queues.

	Each microservice is:
		Autonomously deployable
		Technology agnostic
		Scalable independently
		Organized around business capabilities (e.g., Payment Service, Order Service)



Microservice Ecosystem – Technologies Involved
---------------------------------------------------
Layer					Technologies (with +)				Purpose
-----------------------------------------------------------------------
Core App Layer			Java + Spring Boot + JPA + Lombok				
	
	Build business logic, REST APIs, database interaction

Communication Layer		REST + gRPC + Kafka + RabbitMQ + WebClient		
		
		For service-to-service or async messaging

Persistence Layer		MySQL + PostgreSQL + MongoDB + Redis	
		
		Each microservice can own its DB (polyglot persistence)

Security Layer			Spring Security + OAuth2 + Keycloak + JWT		
		
		Secure APIs and manage authentication/authorization

Service Discovery		Eureka + Consul + Kubernetes DNS				

		Let services find each other dynamically

API Gateway	Spring 		Cloud Gateway + Kong + Istio Ingress Gateway	
	
		Route traffic, throttle, authenticate, and expose APIs

Configuration Management	Spring Cloud Config + Vault + Kubernetes ConfigMap	

				Externalize and manage config per environment
				
Monitoring & Logging	Prometheus + Grafana + ELK Stack + Actuator + Zipkin + Sleuth	

	Trace, monitor, and debug distributed services
	
Packaging	Docker + Jib + Buildpacks	
	Containerize your services for portability
	
Orchestration & Deployment	Kubernetes + Helm + ArgoCD + Terraform	
		Manage deployment, autoscaling, service mesh
		
CI/CD Pipelines	Jenkins + GitHub Actions + GitLab CI + Spinnaker	
		
		Automate building, testing, and deploying services
		
Resilience & Retry	Resilience4j + Hystrix + RetryTemplate	

		Circuit breakers, retries, fallback logic
		
📈 API Documentation	Swagger/OpenAPI + Postman + SpringDoc	

		Self-documenting APIs for teams or clients



Example: Fund Transfer Microservice Stack
-----------------------------------
Layer				Stack
-------------------------------------
Language			Java + Spring Boot
API					REST with Swagger
Messaging			Kafka for transaction logs
DB					PostgreSQL for fund data
Security			Keycloak + OAuth2
Config				Spring Cloud Config Server
Gateway				Spring Cloud Gateway
Discovery			Eureka
Monitoring			Prometheus + Grafana
CI/CD				Jenkins + Docker + Kubernetes



Benefits of Microservice Architecture
--------------------------
	Faster development and deployment cycles
	Independent scaling of services
	Fault isolation (failure in one service won’t take down the entire system)
	Technology flexibility (use Java for one service, Go for another)
	DevOps and cloud-native readiness


Port Numbers for microservice:
------------------------------
products:8082
coupons	:8083
Eureka server: 8070
api gateway: 8072
Zipkin: 9411

open feign : declartive rest client





Step 1: import given code, run both coupons and product service

Step 2: Apply OpenFeign to products microservice to call coupons microservice:

1. create CouponServiceProxy:
----------------------------
@FeignClient(name = "coupons", url = "http://localhost:8083")
public interface CouponServiceProxy {
    @GetMapping("coupon/{couponCode}")
    public Coupon getCouponByCode(@PathVariable String couponCode);
}

2. Enable FeignClient: apply on top of bootstrap class
---------------------------------------------
@EnableFeignClients("com.productapp.proxyservice")


3. change service layer to use CouponServiceProxy
-----------------------





Step 3: Configure eureka server:
-------------------------------
create new project with: eureka server, actuator


1. apply annotation on bootstrap class
@EnableEurekaServer

2. url pattern
http://localhost:8070/

check
http://localhost:8070/eureka/app

3. application.yml configuration for eureka server
--------------------------
spring:
  application:
    name: eureka
server:
  port: 8070
eureka:
  instance:
    hostname: localhost
  client:
    fetch-registry: false
    register-with-eureka: false
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true



configure eureka client in all  the product and coupon service
---------------------------------------------------------------
 add eureka client dep to all projects
 
eureka:
  instance:
    prefer-ip-address: true
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8070/eureka/
	  

5. now check all service must be registed with eureka server

6. now replace hard coded url in Openfeign service to logical names and run the examples
	give logical name of service 
	
//@FeignClient(name = "coupons", url = "http://localhost:8083")
@FeignClient(name = "coupons")
public interface CouponServiceProxy {
    @GetMapping("coupon/{couponCode}")
    public Coupon getCouponByCode(@PathVariable String couponCode);
}




step 5: config server 
---------------------
Create project for config server : config server, actuator, eureaka client

Step 1: apply annotation to the bootstrap class
----------------------------------------

@EnableConfigServer

step 2: configure config server
--------------------------
eureka:
  instance:
    prefer-ip-address: true
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8070/eureka/
	  
spring:
  cloud:
    config:
      server:
        git:
          uri: file:///C:/propfiles
          clone-on-start: true
          default-label: master

  application:
    name: configserver
server:
  port: 8888
  
spring.cloud.config.server.git.uri=file:///C:/propfiles
spring.cloud.config.server.git.clone-on-start=true
spring.cloud.config.server.git.default-label=master


step 3: create config client:
----------------------------
spring:
  config:
    import: optional:configserver:http://localhost:8888
  profiles:
    active:
      - dev
  application:
    name:
  


@RefreshScope
-----------------------
	to automatically pick up changes from the Config Server without restarting your app.

What does @RefreshScope do?
	It tells Spring to recreate the bean when a refresh is triggered (typically via an /actuator/refresh call).
	This means any changes from the config server will be reloaded dynamically into the bean.

management:
  endpoints:
    web:
      exposure:
        include: refresh
		
		
Call the endpoint (manually or via automation):
-----------------------------------------------
POST /actuator/refresh





step 6.gateway routing and cross cutting concern in 
microservicve using "spring cloud gateway"
-----------------------------------------------
step 1:

choose eureka client, actuator, api gateway

<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-gateway</artifactId>
</dependency>



property file configuration:
--------------------------

application.yml
--------------------
server:
  port: 8072
spring:
  application:
    name: gateway

eureka:
  instance:
    prefer-ip-address: true
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8070/eureka/

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true
  endpoint:
    gateway:
      enabled: true
    health:
      probes:
        enabled: true


Apply to get default gateway routing
-------------------------------------

spring:
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
		  
Now we are able to call ms as:
------------------------------
http://localhost:8072/coupons/coupon/SUP10
http://localhost:8072/products/products?id=1&couponCode=SUP10 
		



		
Java configuration give more flexiblity to define routes:
---------------------------------------------------

@Configuration
public class RouteConfig {
    @Bean
    public RouteLocator busycoderRouteConfig(RouteLocatorBuilder routeLocatorBuilder) {
        return routeLocatorBuilder.routes()
                .route(p -> p
                        .path("/productstore/productsms/**")
                        .filters( f -> f.rewritePath("/productstore/productsms/(?<segment>.*)","/${segment}")
                                .addResponseHeader("X-Response-Time", LocalDateTime.now().toString()))
                        .uri("lb://PRODUCTS"))
                .route(p -> p
                        .path("/productstore/couponsms/**")
                        .filters( f -> f.rewritePath("/productstore/couponsms/(?<segment>.*)","/${segment}")
                                .addResponseHeader("X-Response-Time", LocalDateTime.now().toString()))
                        .uri("lb://COUPONS"))
               .build();
    }
}


Configuring global filter:
---------------------------

@Component
public class LoggingFilter implements GlobalFilter {
	private Logger logger = LoggerFactory.getLogger(LoggingFilter.class);
	@Override
	public Mono<Void> filter(ServerWebExchange exchange, 
			GatewayFilterChain chain) {
		logger.info("Path of the request received -> {}", exchange.getRequest().getPath());
		return chain.filter(exchange);
	}
}








step 7.Configure resilence 4j to productstore application
---------------------------------------------------------
We can apply circuitbreaker pattern to api gateway
and to indidual microservice



Implementing circuitBreaker pattern in the product microservice:
----------------------------------------------------------------
Note: product microservice is calling coupon microservice

integration circuitBreaker with feign client
-----------------------------------------
step 1: add dep to product ms

<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
</dependency>
		
step 2:
spring:
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true

resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 10
        permitted-number-of-calls-in-half-open-state: 2
        automatic-transition-from-open-to-half-open-enabled: true
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
        wait-duration-in-half-open-state: 5s 
        #The wait-duration-in-open-state is the amount of time a circuit breaker remains open before switching to a half-open state
		
		

resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
resilience4j.circuitbreaker.configs.default.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.configs.default.slidingWindowSize=10
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=5s
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.configs.default.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.configs.default.minimum-number-of-calls=5

		
now we have to define fallback for feign client in product service
-------------------------------------------------------------------
@FeignClient(name = "coupons", fallback = CouponServiceFallBack.class)
public interface CouponServiceProxy {
    @GetMapping("coupon/{couponCode}")
    public Coupon getCouponByCode(@PathVariable String couponCode);
}


@Component
public class CouponServiceFallBack implements CouponServiceProxy {

    @Override
    public Coupon getCouponByCode(String couponCode) {
        return new Coupon("SUP10", 10, LocalDateTime.now());
    }
}


Now observe the circuitBreaker urls

http://localhost:8082/actuator
http://localhost:8082/actuator/circuitbreakers





Applying circuitbreaker to api gateway 
---------------------------------------

step 1: add depdendency to the app
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-circuitbreaker-reactor-resilience4j</artifactId>
		</dependency>
		
setp 2: config


resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 10
        permitted-number-of-calls-in-half-open-state: 2
        automatic-transition-from-open-to-half-open-enabled: true
        failure-rate-threshold: 50 #percentage
        wait-duration-in-open-state: 10s
	
	
step 3: Configure circuit breaker for productsms and provide fallback:

        return routeLocatorBuilder.routes()
                .route(p -> p
                        .path("/productstore/productsms/**")
                        .filters( f -> f.rewritePath("/productstore/productsms/(?<segment>.*)","/${segment}")
                                .addResponseHeader("X-Response-Time", LocalDateTime.now().toString())
                                .circuitBreaker(config -> config.setName("mycircuitbreaker")
                                        .setFallbackUri("forward:/contactSupport")))

                        .uri("lb://PRODUCTS"))



Step 4: creating fallback controller:

@RestController
public class FallbackController {
    @RequestMapping("/contactSupport")
    public Mono<String> contactSupport() {
        return Mono.just("An error occurred. Please try after some time or contact support team!!!");
    }
}

Observe circuitBreaker design pattern:
						
http://localhost:8072/actuator/circuitbreakers
http://localhost:8072/actuator/circuitbreakerevents?name=mycircuitbreaker



Http timeout configuration:
------------------------------
sometime service is very slow and we will not get immediate response

it keep waiting for the response, a thread is block for the response

how to overcome? we can define timeout configuration:

if we try same with api gateway we get different response due to 

 .circuitBreaker(config -> config.setName("mycircuitbreaker")
                .setFallbackUri("forward:/contactSupport")))

 with default timeout configuration of 1sec
 
 how how to customized it? add configuration to the gateway service
 
 spring:
  cloud:
    gateway:
      discovery:
        locator:
          enabled: false
          lower-case-service-id: true
      httpclient:
        connect-timeout: 1000
        response-timeout: 2s
	
	
retry pattern to the pattern to api gateway:
----------------------------------------

 .route(p -> p
    .path("/productstore/productsms/**")
        .filters( f -> f.rewritePath("/productstore/productsms/(?<segment>.*)","/${segment}")
         .addResponseHeader("X-Response-Time", LocalDateTime.now().toString())
          .retry(config -> config.setRetries(3)
              .setMethods(HttpMethod.GET)
               .setBackoff(Duration.ofMillis(100),Duration.ofMillis(1000),2,true))
                 .circuitBreaker(config -> config.setName("mycircuitbreaker")
                                        .setFallbackUri("forward:/contactSupport")))
                    .uri("lb://PRODUCTS"))				



Retry:Resilience4j Retry implementation in Spring Boot 
------------------------------------------------------

resilience4j.retry:
  instances:
    orderService:
      maxRetryAttempts: 3
      waitDuration: 11000
	  
	  
 @GetMapping("/order")
    @Retry(name = ORDERSERVICE,fallbackMethod = "fallback_retry")
    public ResponseEntity<String> createOrder(){
        logger.info("item service call attempted:::"+ attempts++);
        String response = restTemplate.getForObject("http://localhost:8081/item", String.class);
        logger.info("item service called");
        return new ResponseEntity<String>(response, HttpStatus.OK);
    }
public ResponseEntity<String> fallback_retry(Exception e){
        attempts=1;
    return new ResponseEntity<String>("Item service is down", HttpStatus.INTERNAL_SERVER_ERROR);

}


Spring Boot with Resilience4j Bulkhead implementation  Bulkhead pattern 
----------------------------------------------------------------------

resilience4j.bulkhead:
  instances:
    orderService:
      maxWaitDuration: 5000
      maxConcurrentCalls: 5

resilience4j.thread-pool-bulkhead:
  instances:
    orderService:
      maxThreadPoolSize: 1
      coreThreadPoolSize: 1
      queueCapacity: 1
	  
Example:
---------
    @GetMapping("/order")
    @Bulkhead(name=ORDER_SERVICE,fallbackMethod = "bulkHeadFallback")
    public ResponseEntity<String> createOrder()
    {
        String response = restTemplate.getForObject("http://localhost:8081/item", String.class);
        logger.info(LocalTime.now() + " Call processing finished = " + Thread.currentThread().getName());
        return new ResponseEntity<String>(response, HttpStatus.OK);
    }

    public ResponseEntity<String> bulkHeadFallback(Exception t)
    {
        return new ResponseEntity<String>(" orderService is full and does not permit further calls", HttpStatus.TOO_MANY_REQUESTS);
    }
	
	
	
	

Step 8: Spring boot zipkine and sluth:
------------------------------------------

What is the need to distributed log tracing?

complex call chains
how you debug the problem?
how you trace request accorss microservice?
Distributed log tracking is require


Observability and OpenTelemetry:
------------------------------
Monitoring is the process of collecting and reporting on data to assess system health, 
while observability is a more in-depth approach that analyzes that data to identify and resolve issues. 

https://www.strongdm.com/blog/observability-vs-monitoring

Monitoring vs Observability?
	monitoring is reactive while Observability is proactive
	monitoring is subset of Observability
	
Observability?
	how well do we understand what is happing in the system?
	Step 1: gather data : materix logs or traces
	step 2: get intelligence : AI/Ops and anomaly detection
	
OpenTelemetry: collection of tools, api and sdk to instruments, generate, collect
	and export telemetry data (materix logs or traces)
	
	all applications have materix logs or traces
		why do we need to have a separate standared for each one of these
		opentelemetry: how about one standared for materix logs or traces



Step 1:
pull using docker
-----------------------
docker pull openzipkin/zipkin:2.23
docker run -p 9411:9411 openzipkin/zipkin:2.23

or download using powershell
------------------------------
curl https://repo1.maven.org/maven2/io/zipkin/zipkin-server/2.24.2/zipkin-server-2.24.2-exec.jar -o zipkin.jar

java -jar zipkin.jar





Step 2: add dependency to each projects
---------------------------------------
<!-- SB3 :  Micrometer 
            > OpenTelemetry 
            > Zipkin 
-->

<!-- Micrometer - Vendor-neutral application observability facade. 
    Instrument your JVM-based application code without vendor lock-in.  
    Observation (Metrics & Logs) + Tracing.
-->


<!--Open Telemetry as Bridge (RECOMMENDED) -->
<!-- Open Telemetry - Simplified Observability (metrics, logs, and traces) -->


<dependency>
    <groupId>io.micrometer</groupId>
    <artifactId>micrometer-observation</artifactId>
</dependency>

<dependency>
    <groupId>io.micrometer</groupId>
    <artifactId>micrometer-tracing-bridge-otel</artifactId>
</dependency>

<dependency>
    <groupId>io.opentelemetry</groupId>
    <artifactId>opentelemetry-exporter-zipkin</artifactId>
</dependency>

<dependency>
	<groupId>io.github.openfeign</groupId>
	<artifactId>feign-micrometer</artifactId>
</dependency>



Step 3: add tracing sampling to each project:
---------------------------------------
management:
  tracing:
    sampling:
      probability: 1.0
	    
logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"


for feign we need to add addtional depdendency:
------------------------------------
<!-- Enables tracing of REST API calls made using Feign - V3 ONLY-->

<dependency>
	<groupId>io.github.openfeign</groupId>
	<artifactId>feign-micrometer</artifactId>
</dependency>

management.tracing.sampling.probability=1.0
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

spring.config.import=optional:configserver:

##spring.zipkin.baseUrl=http://localhost:9411/
##management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans




9. Spring boot grafana and prometheus
----------------------------------------
https://medium.com/@extio/unveiling-the-architectural-brilliance-of-prometheus-af07cca14896

Prometheus: Hello world configuration:
__________________________________

Step 1: create spring boot application with actuator, and prometheus dep
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		
		
		
server:
  port: 8080
management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: "*"
  endpoint:
    prometheus:
      enabled: true
    metrics:
      enabled: true		
		
		
Check 
http://localhost:8080/actuator/prometheus


step 2: download sw

Download and configure Prometheus: run on port : 9090
https://prometheus.io/download/

https://github.com/prometheus/prometheus/releases/tag/v2.50.0

download grafana:
wget https://dl.grafana.com/enterprise/release/grafana-enterprise-9.5.2.linux-amd64.tar.gz
https://grafana.com/grafana/download/9.5.2?platform=windows


Step 3: configure spring boot application monitoring to  Prometheus:
	search google (configure prometheus to monitor itself)
	
	
prometheus.yml
-----------------
global:
  scrape_interval:     15s # By default, scrape targets every 15 seconds.

  # Attach these labels to any time series or alerts when communicating with
  # external systems (federation, remote storage, Alertmanager).
  external_labels:
    monitor: 'codelab-monitor'

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
  - job_name: 'prometheus'

    # Override the global default and scrape targets from this job every 5 seconds.
    scrape_interval: 5s

    static_configs:
      - targets: ['localhost:9090']
 
  - job_name: 'spring-actuator'
    metrics_path: '/actuator/prometheus'
    scrape_interval: 5s
    static_configs:
    - targets: ['localhost:8080']
    
    
Start prometheus
./prometheus 

4.start grafana:
 bin/grafana-server
 http://localhost:9090
up

grafana dashboard
http://localhost:3000/

Dashboard-> new import -> grafana dashboard id -->put that id---> ui is created

	 search google SpringBoot APM Dashboard
	 




Microservice security:
-----------------------
spring sec:
	basics auth
	jwt auth

OAuth2? is mainly used for delegated authorization?
spring sec of ms

OAuth2  ( jpa -> hibeante, eclipselink)
------------------------------
Protocol that allow a user to grant limited access to there
resouces on one site to the another side
without exposing there credential

Open ID connect
----------------
OAuth2 was designed for authorization
Open ID connect is build on top of Oauth2

Open ID connect: id token to the request
OAuth2
http

what type of request flows is supported by Oauth2?
--------------------------------------------
1. Authroization code grant (front end + back end)
2. client credential grant (backend application )
		service -----------------service2
		
3. Resouce owner passaward grant type (back application) ❌ Deprecated
4. Implicit code grant (js application)	❌ Deprecated



OAuth keyclock integration:
---------------------------
https://www.keycloak.org/getting-started/getting-started-docker

Step 1: configure keycloak server using docker

https://www.keycloak.org/

docker run -d -p 7080:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:25.0.1 start-dev

in case you are not using docker:
-------------------------------------
https://www.keycloak.org/archive/downloads-24.0.4.html

bin\kc.bat start-dev
http://localhost:8080

In first run, it will prompt:
---------------------------
Please create an initial admin user:
	You must enter:
	Username
	Password
	
step 2: register client application with keycloak server:
---------------------------------------------------
client -> create client -> openid connect

provide:
cc: client credential

client id: busycoder-cc

client name: busycoder-cc-app

enable client authentication--->auth flow --> service accounts roles (other dont select)
				two application try to communicate each other
				
copy client secret:

client secret: 1x04U32r1fOXTbG1VCAnSK2s5zn8BNdL


step 3: getting access token form auth server in client credential grant flow:
------------------------------------------------------------------------------
go to relem setting-->open endpoint section
http://localhost:7080/realms/master/.well-known/openid-configuration

select and create new post request to following url to get token:

http://localhost:8080/realms/master/protocol/openid-connect/token

http://localhost:7080/realms/master/protocol/openid-connect/token

grant_type: client_credentials
client_id: busycoder-cc
client_secret: 
scope: openid email profile

understand token formate


step 4: Securing gateway server as resource server:

add following dependencies:

       <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-resource-server</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-jose</artifactId>
		</dependency>



step 5: add configuration to customized security

@Configuration
@EnableWebFluxSecurity
public class SecurityConfig {
    @Bean
    public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity serverHttpSecurity) {
        serverHttpSecurity.authorizeExchange(exchanges -> exchanges.pathMatchers(HttpMethod.GET).authenticated()
                .pathMatchers("/busycoder/accounts/**").authenticated()
                .pathMatchers("/busycoder/cards/**").authenticated()
                .pathMatchers("/busycoder/loans/**").authenticated())
                .oauth2ResourceServer(oAuth2ResourceServerSpec -> oAuth2ResourceServerSpec
                        .jwt(Customizer.withDefaults()));
        serverHttpSecurity.csrf(csrfSpec -> csrfSpec.disable());
        return serverHttpSecurity.build();
    }
}



step 6: resourceserver will fetch certificates from auth server
		resourceserver will validate token using this certificates
		
spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: "http://localhost:7080/realms/master/protocol/openid-connect/certs"
		  

step 7: now try calling api

Select auth type: oauth2
add authorization data to : request headers

configure new token:
token : clientcredentials _ccesstoken
grant type: client credential
Auth access url: http://localhost:7080/realms/master/protocol/openid-connect/token
client id: busycoder-cc
Client Secret: Gs4tq3qUpT7S41qf9B3NXnvRsnhDb3BI
Scope: openid email profile
Client Authentication: send client credential in body


use token type: access token




step 8: implementation authorization inside gateway server using roles
-----------------------------------------------------------------------

Step 1: go to relm roles--> create new roles 
				ACCOUNTS, CARDS, LOANS


Step 2: go to client -> busycoder-cc -->service account role--> assign role ACCOUNTS


Step 3: get fresh access token and verify new role jwt.io now you can see new role under realm_access
					

Step 4: Now we need to extract role in our java code
------------

public class KeycloakRoleConverter  implements Converter<Jwt, Collection<GrantedAuthority>> {
    @Override
    public Collection<GrantedAuthority> convert(Jwt source) {
        Map<String, Object> realmAccess = (Map<String, Object>) source.getClaims().get("realm_access");
        if (realmAccess == null || realmAccess.isEmpty()) {
            return new ArrayList<>();
        }
        Collection<GrantedAuthority> returnValue = ((List<String>) realmAccess.get("roles"))
                .stream().map(roleName -> "ROLE_" + roleName)
                .map(SimpleGrantedAuthority::new)
                .collect(Collectors.toList());
        return returnValue;
    }
}

Step 5: use roles:
-------------
@Configuration
@EnableWebFluxSecurity
public class SecurityConfig {
    @Bean
    public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity serverHttpSecurity) {
        serverHttpSecurity.authorizeExchange(exchanges -> exchanges.pathMatchers(HttpMethod.POST).authenticated()
                .pathMatchers("/busycoder/accounts/**").hasRole("ACCOUNTS")
                .pathMatchers("/busycoder/cards/**").hasRole("CARDS")
                .pathMatchers("/busycoder/loans/**").hasRole("LOANS"))
                .oauth2ResourceServer(oAuth2ResourceServerSpec -> oAuth2ResourceServerSpec.jwt(jwtSpec ->
                        jwtSpec.jwtAuthenticationConverter(grantedAuthoritiesExtractor())));
        serverHttpSecurity.csrf(csrfSpec -> csrfSpec.disable());
        return serverHttpSecurity.build();
    }

    private Converter<Jwt, Mono<AbstractAuthenticationToken>> grantedAuthoritiesExtractor() {
        JwtAuthenticationConverter jwtAuthenticationConverter =
                new JwtAuthenticationConverter();
        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter
                (new KeycloakRoleConverter());
        return new ReactiveJwtAuthenticationConverterAdapter(jwtAuthenticationConverter);
    }

}

Step 6: now we can access account resource but for others we get 403 error


Authorization code grant type flow:
---------------------------------------

client -> create client -> openid connect

provide:
cc: client credential

client id: busycoder-ac

client name: busycoder-cc-app2

enable client authentication--->auth flow -->standard flow (other dont select)
				two application try to communicate each other
				
copy client secret:

client secret: VA7R6c0IiwXySnMjBkvptGIdDRIx1IbM

Access settings
Root URL blank
Home URL blank
Valid redirect URIs *
Valid post logout redirect URIs blank
Web origins *
Admin URL blank










7. ELK
=========
Step 1: download tools
---------------------------
https://www.elastic.co/downloads/past-releases/elasticsearch-6-5-1
https://www.elastic.co/downloads/past-releases/kibana-6-5-1
https://www.elastic.co/downloads/past-releases/logstash-6-5-1

Step 2:

Start elasticsearch(9200)
-------------------
 ./elasticsearch port No: localhost:9200

start kibana(5601)
--------------
Uncomment the file kibana.yml to point to the elasticsearch instance. 
elasticsearch url: http://localhost:9200

./bin/kibana

logstash
-------------
Create a configuration file named logstash.conf
bin/logstash -f bin/logstash.conf

http://localhost:9200/_cat/indices/?v
http://localhost:9200/logstash-2022.08.02/_search

logstash-*





step 4: create config server:
--------------------------
Choose : lombok,config server,actuator

apply 
-----
@EnableConfigServer to the bootstrap class

application.yml
----------------
server:
  port: 8071
spring:
  application:
    name: configserver
  cloud:
    config:
      server:
        git:
          uri: file:///C:/configfiles
          clone-on-start: true
          default-label: master


now try:
---------
http://localhost:8071/accounts/default
http://localhost:8071/loans/default
http://localhost:8071/cards/default



Step 5: read property files from config server
-----------------------------------------------
1. change in every project add: config client dependency

2. now add configuration
spring:
  config:
    import: optional:configserver:http://localhost:8071
	
http://localhost:8080/api/contact-info


3. what if config property changes?

@RefreshScope on top of the restcontroller

in client application use refresh endpoint

http://localhost:8080/actuator/refresh





